/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sendmarks;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Properties;
import java.util.prefs.Preferences;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.util.AreaReference;
import org.apache.poi.ss.util.CellReference;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author James M. Curran <j.curran@auckland.ac.nz>
 */
public class SendMarksGUI extends javax.swing.JFrame {

  public class PopupListener extends MouseAdapter {

    public void mousePressed(MouseEvent e) {
      maybeShowPopup(e);
    }

    public void mouseReleased(MouseEvent e) {
      maybeShowPopup(e);
    }

    private void maybeShowPopup(MouseEvent e) {
      if (e.isPopupTrigger()) {
        jPopupMenuEdit.show(e.getComponent(),
          e.getX(), e.getY());
      }
    }
  }
  /**
   * Creates new form SendMarksGUI
   */
  public SendMarksGUI() {
    initComponents();
    
    jcbDummyRun.setSelected(true);
    bDummyRun = true;
    
    jPopupMenuEdit = new javax.swing.JPopupMenu();
    jPMICopy = new javax.swing.JMenuItem("Copy");

    jPMICopy.addActionListener((ActionEvent evt) -> {
      jPMICopyActionPerformed(evt);
    });

    jPMICopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.META_MASK));


    jPopupMenuEdit.add(jPMICopy);

    MouseListener popupListener = new PopupListener();
    jtaActivityLog.addMouseListener(popupListener);
    //m_strCWD = "/Users/jcur002/curran/Work/2016/Teaching/779/Assignments/A3/Marks/MarksAss3";
    
    // I have changed this so that the last used directory is the chosen directory
    Preferences prefs = Preferences.userNodeForPackage(this.getClass());
    m_strCWD = prefs.get("CURRENT_WORKING_DIR", System.getProperty("user.home"));
    
    // Set the course number to the last value used
    String strCourse = prefs.get("COURSE", "STATS 779");
    jcbCourse.setSelectedItem(strCourse);

    
    // Set the assignment number to the last value used
    String strAssNum = prefs.get("ASSNUM", "0");
    int nAssNum = Integer.parseInt(strAssNum);
    jcbAssignmentNumber.setSelectedIndex(nAssNum);

    
    jlabCurrentDirectory.setText(m_strCWD);
    
    jtfNameRange.setInputVerifier(new RangeInputVerifier());
    jtfMarkRange.setInputVerifier(new RangeInputVerifier());
    jtfFinalMarkRange.setInputVerifier(new RangeInputVerifier());
   }
  
  
  

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
   * content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtfSubjectLine = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jcbAssignmentNumber = new javax.swing.JComboBox<>();
        jbChangeDir = new javax.swing.JButton();
        jbSendMarks = new javax.swing.JButton();
        jbScrapeGrades = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtaActivityLog = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jlabCurrentDirectory = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jtfMarkRange = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jcbSheetNumber = new javax.swing.JComboBox<>();
        jtfNameRange = new javax.swing.JTextField();
        jtfFinalMarkRange = new javax.swing.JTextField();
        jcbDummyRun = new javax.swing.JCheckBox();
        jbGuessRanges = new javax.swing.JButton();
        jPB = new javax.swing.JProgressBar();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jcbCourse = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jcbType = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmenuSetup = new javax.swing.JMenu();
        jMenuItemConfigure = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtfSubjectLine.setText("STATS 779 Assignment Marks");

        jLabel2.setText("Enter your subject line here");

        jLabel3.setText("Assignment Number:");

        jcbAssignmentNumber.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));
        jcbAssignmentNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbAssignmentNumberActionPerformed(evt);
            }
        });

        jbChangeDir.setText("Change Directory");
        jbChangeDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbChangeDirActionPerformed(evt);
            }
        });

        jbSendMarks.setText("Send Marks");
        jbSendMarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSendMarksActionPerformed(evt);
            }
        });

        jbScrapeGrades.setText("Scrape Grades");
        jbScrapeGrades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbScrapeGradesActionPerformed(evt);
            }
        });

        jtaActivityLog.setColumns(20);
        jtaActivityLog.setRows(5);
        jScrollPane2.setViewportView(jtaActivityLog);

        jLabel6.setText("Activity Log");

        jLabel7.setText("Current Directory:");

        jlabCurrentDirectory.setText("(None)");

        jLabel1.setText("Name Range:");

        jLabel8.setText("Mark Range:");

        jLabel9.setText("Final Mark Range:");

        jtfMarkRange.setText("$A$4:$E$24");

        jLabel10.setText("Sheet:");

        jcbSheetNumber.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3" }));

        jtfNameRange.setText("$B$1:$B$2");
        jtfNameRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfNameRangeActionPerformed(evt);
            }
        });

        jtfFinalMarkRange.setText("$C$25:$D$25");

        jcbDummyRun.setSelected(true);
        jcbDummyRun.setText("Dummy Run");
        jcbDummyRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbDummyRunActionPerformed(evt);
            }
        });

        jbGuessRanges.setText("Guess Ranges");
        jbGuessRanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuessRangesActionPerformed(evt);
            }
        });

        jLabel4.setText("Progress:");

        jLabel5.setText("Course:");

        jcbCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "STATS 779", "FORSCI 703" }));
        jcbCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbCourseActionPerformed(evt);
            }
        });

        jLabel11.setText("Type:");

        jcbType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Assignment", "Test" }));
        jcbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbTypeActionPerformed(evt);
            }
        });

        jmenuSetup.setText("Setup");

        jMenuItemConfigure.setText("Configure...");
        jMenuItemConfigure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemConfigureActionPerformed(evt);
            }
        });
        jmenuSetup.add(jMenuItemConfigure);

        jMenuBar1.add(jmenuSetup);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlabCurrentDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtfMarkRange)
                                    .addComponent(jtfFinalMarkRange)
                                    .addComponent(jtfNameRange))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbGuessRanges)
                                .addGap(130, 130, 130))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jbChangeDir)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jcbSheetNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jtfSubjectLine, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jcbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(26, 26, 26)
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jcbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(26, 26, 26)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jcbAssignmentNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 14, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jbSendMarks)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcbDummyRun))
                            .addComponent(jbScrapeGrades)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(27, 27, 27)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jtfSubjectLine, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jcbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(jcbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jcbAssignmentNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jbChangeDir)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jcbSheetNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfNameRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfMarkRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jtfFinalMarkRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbGuessRanges))
                        .addGap(5, 5, 5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbSendMarks)
                            .addComponent(jcbDummyRun))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbScrapeGrades)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel4)
                        .addComponent(jPB, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlabCurrentDirectory)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  private void jMenuItemCopyActionPerformed(java.awt.event.ActionEvent evt) {                                              
    String strFormatted = jtaActivityLog.getText();
    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
    clipboard.setContents(new StringSelection(strFormatted), null);
  }                                             

  private void jPMICopyActionPerformed(ActionEvent evt) {
    String strFormatted = jtaActivityLog.getText();
    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
    clipboard.setContents(new StringSelection(strFormatted), null);
  }
  
  private void jbChangeDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbChangeDirActionPerformed
    // TODO add your handling code here:
    JFileChooser fc = new JFileChooser(m_strCWD);
    fc.setDialogTitle("Choose a case directory...");
    fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    fc.setAcceptAllFileFilterUsed(false);

    int nResult = fc.showOpenDialog(this);

    if (nResult == JFileChooser.APPROVE_OPTION) {
      File selectedFile = fc.getSelectedFile();
      String strPath = selectedFile.getAbsolutePath();
      jlabCurrentDirectory.setText(strPath);
      m_strCWD = strPath;
      
      Preferences prefs = Preferences.userNodeForPackage(this.getClass());
      prefs.put("CURRENT_WORKING_DIR", m_strCWD);
    }
  }//GEN-LAST:event_jbChangeDirActionPerformed

  private Session getMailSession(){ 
    Preferences prefs = Preferences.userNodeForPackage(this.getClass());
    String from = prefs.get("FROM", "someone@somewhere.com");
    
    // Sender's email ID needs to be mentioned
    // TODO: Crude check to see if the mail settings have been changed. Probably needs to be smarter
    if (from.equalsIgnoreCase("someone@somewhere.com")) {
      JOptionPane.showMessageDialog(null, "I can't send mail until your e-mail has been properly configured.");
      return null;
    }
    
    String username = prefs.get("USER", "");
    String host = prefs.get("HOST", "");
    String TTLS = prefs.get("TTLS", "");
    String port = prefs.get("PORT", "");

    Properties props = new Properties();
    props.put("mail.smtp.auth", "true");
    props.put("mail.smtp.starttls.enable", TTLS);
    props.put("mail.smtp.host", host);
    props.put("mail.smtp.port", port);


    PasswordDialog dlg = new PasswordDialog(null, true);
    dlg.setVisible(true);
    String strPassword = dlg.getPassword();

    // Get the Session object.
    return Session.getInstance(props,
      new javax.mail.Authenticator() {
      protected PasswordAuthentication getPasswordAuthentication() {
        return new PasswordAuthentication(username, strPassword);
      }
    });
  }
  
    
  private void jbSendMarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSendMarksActionPerformed
    // TODO add your handling code here:
    File f = new File(m_strCWD);
    
    FilenameFilter xlsxFilter = new FilenameFilter() {
      @Override
			public boolean accept(File dir, String name) {
				return name.toLowerCase().endsWith(".xlsx");
			}
		};
    
    ArrayList<File> Files = new ArrayList<File>(Arrays.asList(f.listFiles(xlsxFilter)));
    String strLog = "";
    jPB.setMaximum(Files.size());
    jPB.setValue(0);
    int pbCounter = 0;
    
    SheetInfo sheetInfo = new SheetInfo("Sheet" + jcbSheetNumber.getSelectedItem(),
                                        jtfNameRange.getText(),
                                        jtfMarkRange.getText(),
                                        jtfFinalMarkRange.getText(),
                                        (String)jcbAssignmentNumber.getSelectedItem(),
                                        (String)jcbCourse.getSelectedItem(),
                                        (String)jcbType.getSelectedItem());
     

    Session session = getMailSession();
    
    if(session != null){  
      Preferences prefs = Preferences.userNodeForPackage(this.getClass());
      String from = prefs.get("FROM", "");
      
      for(File f1 : Files){

        HTMLMarksheet ms = null;

        try{
          ms = new HTMLMarksheet(f1, sheetInfo);
        }catch(FilenameFormatException | FileNotFoundException e){
          JOptionPane.showMessageDialog(this, e, "Exception", JOptionPane.ERROR_MESSAGE);
        }catch(IOException e){
          JOptionPane.showMessageDialog(this, e, "Exception", JOptionPane.ERROR_MESSAGE);
        }

        try {
          ms.write(m_strCWD + "/test/");
        } catch (IOException ex) {
          ex.printStackTrace();
        }



        ms.send(session, jtfSubjectLine.getText(), from, bDummyRun);
        if(bDummyRun){
          strLog += "Faked sending message to " + ms.getNetId() + "\n";
        }else{
          strLog += "Sent message to " + ms.getNetId() + "\n";
        }
        
        jtaActivityLog.setText(strLog);
        pbCounter++;
        jPB.setValue(pbCounter);
      }
    }else{
      JOptionPane.showMessageDialog(this, null, "Couldn't get mail session\n", JOptionPane.ERROR_MESSAGE);
    }
  }//GEN-LAST:event_jbSendMarksActionPerformed

  private void jbScrapeGradesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbScrapeGradesActionPerformed
    File f = new File(m_strCWD);
    FilenameFilter xlsxFilter = new FilenameFilter() {
      @Override
      public boolean accept(File dir, String name) {
        return name.toLowerCase().endsWith(".xlsx");
      }
    };

    ArrayList<File> Files = new ArrayList<>(Arrays.asList(f.listFiles(xlsxFilter)));

    SheetInfo sheetInfo = new SheetInfo("Sheet" + jcbSheetNumber.getSelectedItem(),
      jtfNameRange.getText(),
      jtfMarkRange.getText(),
      jtfFinalMarkRange.getText(),
      (String) jcbAssignmentNumber.getSelectedItem(),
      (String)jcbCourse.getSelectedItem(),
      (String)jcbType.getSelectedItem());

    JFileChooser jfc = new JFileChooser(m_strCWD);

    int returnValue = jfc.showOpenDialog(null);
    // int returnValue = jfc.showSaveDialog(null);

    if (returnValue == JFileChooser.APPROVE_OPTION) {
      File selectedFile = jfc.getSelectedFile();
      String strPath = selectedFile.getAbsolutePath();

      FileWriter fw;
      BufferedWriter bw;

      try {
        fw = new FileWriter(strPath);
        bw = new BufferedWriter(fw);
        String strLog = "";
        
        jPB.setMaximum(Files.size());
        jPB.setValue(0);
        int pbCounter = 0;
 
        for (File f1 : Files) {

          HTMLMarksheet ms = null;

          try {
            ms = new HTMLMarksheet(f1, sheetInfo);
            StringBuilder sb = new StringBuilder();

            sb.append(ms.getNetId()).append(',').append(ms.getFinalMark()).append('\n');
            bw.write(sb.toString());
            strLog += sb.toString();
            jtaActivityLog.setText(strLog);
            pbCounter++;
            jPB.setValue(pbCounter);
          } catch (FilenameFormatException | FileNotFoundException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Exception", JOptionPane.ERROR_MESSAGE);
          } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Exception", JOptionPane.ERROR_MESSAGE);
          }
        }
        bw.close();
        fw.close();
      } catch (IOException e) {
        JOptionPane.showMessageDialog(this, e.getMessage(), "Exception", JOptionPane.ERROR_MESSAGE);
      }
    }
 
  }//GEN-LAST:event_jbScrapeGradesActionPerformed

  private void jcbAssignmentNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbAssignmentNumberActionPerformed
    StringBuilder sb = new StringBuilder();
    
    sb.append((String)jcbCourse.getSelectedItem()).append(" ").append((String)jcbType.getSelectedItem()).append(" ").append(jcbAssignmentNumber.getSelectedItem()).append(" Marks");
    jtfSubjectLine.setText(sb.toString());
    
    Preferences prefs = Preferences.userNodeForPackage(this.getClass());
    int i = Integer.parseInt((String)(jcbAssignmentNumber.getSelectedItem()));
    String strAssNum = String.format("%d", i - 1);
    prefs.put("ASSNUM", strAssNum);
  }//GEN-LAST:event_jcbAssignmentNumberActionPerformed

  private void jcbDummyRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbDummyRunActionPerformed
    bDummyRun = jcbDummyRun.isSelected();
  }//GEN-LAST:event_jcbDummyRunActionPerformed

  private void jtfNameRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfNameRangeActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_jtfNameRangeActionPerformed
  
  private void jMenuItemConfigureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemConfigureActionPerformed
    
    try{
      MailConfigDialog dlg = new MailConfigDialog(this, true);
      dlg.show(true);
      
      if(dlg.isSaved()){
        
      }
    }catch(Exception e){
      JOptionPane.showMessageDialog(this, e.getMessage(), "Exception", JOptionPane.ERROR_MESSAGE);
    }
    
  }//GEN-LAST:event_jMenuItemConfigureActionPerformed

  private class RC{
    int row, col;
    
    
    public RC(){
      row = -1;
      col = -1;
    }
    
    public RC(int r, int c){
      row = r;
      col = c;
    }
    
    public RC(RC rc){
      row = rc.row;
      col = rc.col;
    }
    
    public void add(int rowOffset, int colOffset){
      row += rowOffset; // NOTE: there is no bounds checking here
      col += colOffset;
    }
    
    public void add(RC rc){
      row += rc.row;
      col += rc.col;
    }
    
    public void incRow(){
      row++;
    }
    
    public void incCol(){
      col++;
    }
    
    public boolean isAddress(){
      return (row > 0 & col > 0);
    }
    
    public String toString(){
      StringBuilder sb = new StringBuilder();
      
      sb.append('$').append((char)(64 + col)).append('$').append(row);
      
      return sb.toString();
    }
  }
  
  private RC findAddress(Sheet sheet, String cellContent) {
    for (Row row : sheet) {
      for (Cell cell : row) {
         if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
          if (cell.getRichStringCellValue().getString().trim().equals(cellContent)) {
            return new RC(row.getRowNum() + 1, cell.getColumnIndex() + 1);
          }
        }
      }
    }
    return new RC();
  }
  
  private String buildAddress(String sheetName, RC topLeft, RC bottomRight){
    StringBuilder sb = new StringBuilder();
    
    if(sheetName != null){
      sb.append(sheetName).append('!').append(topLeft.toString()).append(':');
      sb.append(sheetName).append('!').append(bottomRight.toString());
    }else{
      sb.append(topLeft.toString()).append(':');
      sb.append(bottomRight.toString());
    }
    return sb.toString();
  }
  
  private String buildAddress(String sheetName, RC cellAddr){
    StringBuilder sb = new StringBuilder();
    
    if(sheetName != null){
      sb.append(sheetName).append('!').append(cellAddr.toString());
    }else{
      sb.append(cellAddr.toString());
    }
    
    return sb.toString();
  }
  
  private void jbGuessRangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuessRangesActionPerformed
    // TODO add your handling code here:
    File f = new File(m_strCWD);

    FilenameFilter xlsxFilter = new FilenameFilter() {
      @Override
      public boolean accept(File dir, String name) {
        return name.toLowerCase().endsWith(".xlsx");
      }
    };

    File fList[] = f.listFiles(xlsxFilter);

    if (fList.length == 0) {
      // Error Dialog here
    } else {
      File f1 = fList[0];

      Pattern p = Pattern.compile("^(?<netid>[A-Za-z]{3,4}[0-9]{3})\\.xlsx");
      Matcher m = p.matcher(f1.getName());

      if (m.find()) {
        InputStream excelFileToRead;
        XSSFWorkbook workbook = null;

        try {
          excelFileToRead = new FileInputStream(f1.getAbsolutePath());
          workbook = new XSSFWorkbook(excelFileToRead);
          Sheet sheet = workbook.getSheetAt(0); // Assumes marks on Sheet 1
          
          RC nameAddr = findAddress(sheet, "Name");
          RC UPIAddr = findAddress(sheet, "UPI");
          RC marksStart = findAddress(sheet, "Question");
          RC marksEnd = findAddress(sheet, "Total");
          
          if(nameAddr.isAddress() && UPIAddr.isAddress() && marksStart.isAddress() && marksEnd.isAddress()){
            nameAddr.add(new RC(0, 1)); 
            UPIAddr.add(new RC(0, 1));
                        
            String nameRange = buildAddress(null, nameAddr, UPIAddr);
            
            jtfNameRange.setText(nameRange);
            
            RC qmarksStart = new RC(marksStart);
            RC qmarksEnd = new RC(marksEnd);
            qmarksEnd.add(new RC(-1, 3));
            
            String qmarksRange = buildAddress(null, qmarksStart, qmarksEnd);
            
            jtfMarkRange.setText(qmarksRange);
            
            RC finalMarksStart = new RC(marksEnd);
            RC finalMarksEnd = new RC(marksEnd);
            
            finalMarksStart.add(new RC(0, 1));
            finalMarksEnd.add(new RC(0, 2));
            
            String finalMarkRange = buildAddress(null, finalMarksStart, finalMarksEnd);
            
            jtfFinalMarkRange.setText(finalMarkRange);
            
          }else{
            JOptionPane.showMessageDialog(this, "Sorry I couldn't determine ranges.", "Something went wrong", JOptionPane.WARNING_MESSAGE);
          }
          
          
        }catch (FileNotFoundException e) {
          JOptionPane.showMessageDialog(this, e.getMessage(), "File Not Found Exception", JOptionPane.ERROR_MESSAGE);
        }catch (IOException e) {
          JOptionPane.showMessageDialog(this, e.getMessage(), "IO Exception", JOptionPane.ERROR_MESSAGE);
        }

      } else {
        StringBuilder sb = new StringBuilder();

        sb.append("The file ").append(f1.getName()).append(" does not conform to the format: UPI.xlsx");
        sb.append(" where UPI consists of 3 or 4 letters and exaxtly three numbers, e.g. jcur002. ");
        sb.append("This is not a critical error, but this file will not be processed.");
        
        JOptionPane.showMessageDialog(this, sb.toString(), "File Name Format Exception", JOptionPane.WARNING_MESSAGE);
      }
    }
  }//GEN-LAST:event_jbGuessRangesActionPerformed

  private void jcbCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbCourseActionPerformed
    StringBuilder sb = new StringBuilder();
    
    sb.append((String)jcbCourse.getSelectedItem()).append(" ").append((String)jcbType.getSelectedItem()).append(" ").append(jcbAssignmentNumber.getSelectedItem()).append(" Marks");
    jtfSubjectLine.setText(sb.toString());
    
    Preferences prefs = Preferences.userNodeForPackage(this.getClass());
    String strCourse = (String)jcbCourse.getSelectedItem();
    prefs.put("COURSE", strCourse);
  }//GEN-LAST:event_jcbCourseActionPerformed

    private void jcbTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbTypeActionPerformed
    StringBuilder sb = new StringBuilder();
    
    sb.append((String)jcbCourse.getSelectedItem()).append(" ").append((String)jcbType.getSelectedItem()).append(" ").append(jcbAssignmentNumber.getSelectedItem()).append(" Marks");
    jtfSubjectLine.setText(sb.toString());
    
    Preferences prefs = Preferences.userNodeForPackage(this.getClass());
    String strType = (String)jcbType.getSelectedItem();
    prefs.put("TYPE", strType);
    }//GEN-LAST:event_jcbTypeActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(SendMarksGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(SendMarksGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(SendMarksGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(SendMarksGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new SendMarksGUI().setVisible(true);
      }
    });
  }
  
  private boolean bDummyRun;
  
  private String m_strCWD;
  
  private javax.swing.JPopupMenu jPopupMenuEdit;
  private javax.swing.JMenuItem jPMIClear;
  private javax.swing.JMenuItem jPMICopy;
  private javax.swing.JMenuItem jPMIPaste;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemConfigure;
    private javax.swing.JProgressBar jPB;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbChangeDir;
    private javax.swing.JButton jbGuessRanges;
    private javax.swing.JButton jbScrapeGrades;
    private javax.swing.JButton jbSendMarks;
    private javax.swing.JComboBox<String> jcbAssignmentNumber;
    private javax.swing.JComboBox<String> jcbCourse;
    private javax.swing.JCheckBox jcbDummyRun;
    private javax.swing.JComboBox<String> jcbSheetNumber;
    private javax.swing.JComboBox<String> jcbType;
    private javax.swing.JLabel jlabCurrentDirectory;
    private javax.swing.JMenu jmenuSetup;
    private javax.swing.JTextArea jtaActivityLog;
    private javax.swing.JTextField jtfFinalMarkRange;
    private javax.swing.JTextField jtfMarkRange;
    private javax.swing.JTextField jtfNameRange;
    private javax.swing.JTextField jtfSubjectLine;
    // End of variables declaration//GEN-END:variables
}
